% 
% Looping (Part 1)
% 1.	Create a column vector filled with NaNs (using the nan() function)...
% that is 12 elements long. You will use this to store the values generated ...
% in steps 2 and 3.

col_vec = NaN(12,1);

% 2.	Create a for-loop that iterates over the elements in this vector.

for i = 1:size(col_vec,1)
end

% 3.	On each iteration, replace the corresponding NaN with the sum of:...
% the index of the iteration you are currently on and a random number...
% (generated by rand()).
% 4.	Now, loop over your modified column vector.

for i = 1:size(col_vec,1)
    col_vec(i,:) = i + rand();
end

% 5.	On each iteration, determine whether the number stored in that...
% location of the vector is greater than, less than, or equal to 0.5 when...
% you subtract its index from the number, e.g. if the number in the 3rd...
%     location is 3.3 then the answer would be less than.
% 6.	When you make the determination in Step 5, print the original...
% number in that location, and then the string corresponding to the answer,...
% i.e. "Less Than", "Equal", "Greater Than."

for i = 1:size(col_vec,1)
    if col_vec(i,1) - i < .5
        fprintf('%.3f Less Than \n', col_vec(i,1))
    elseif col_vec(i,1) - i == .5
        fprintf('%.3f Equal \n', col_vec(i,1))
    elseif col_vec(i,1) - i > .5
        fprintf('%.3f Greater Than \n', col_vec(i,1))
    end
end

%%
% Load a file
% ?	In this section, you will load a text file that contains a row of ...
% column names followed by numeric data in each of the columns. The file...
% lives in the "datafiles" subdirectory of the Resources section of the...
% course website.  The file is called txtdata_subnum.txt.
% ?	Load the file in two steps:
% 1.	Create a variable called "fname" which contains the name of this...
% file, including the full path to the file. Hint: Use the sprintf() or...
% fullfile() commands.

fname = sprintf('Users/wbr/walter/209/txtdata_subnum.txt');

% 2.	Use the tdfread() command to load in the contents of the file. ...

tdfread(fname);

% This will create a set of variables that correspond to your column names....
%  If you call tdfread and assign the result to a variable, it will create...
% a structure with fields that correspond to the different variables. ...
%  We haven't talked about structures yet.  So, to use tdfread and have ...
% the data appear in variables that correspond to the column names in the ...
% file, call the function without assigning the output to a variable, ...
% i.e. tdfread(fname).
% Note #1: tdfread is a function in the Statistics toolbox.  Depending on ...
% your installation of Matlab and your license management scheme, you...
% may or may not have access to this toolbox.
% In the event that you can't access tdfread(), then load the file ...
%  txtdata_subnum_nohd.txt which doesn't contain the first line with the...
% variable names. Use load() to load the file and then assign the columns ... 
% of data to appropriately named variables (the column names in txtdata_subnum.txt).
% Note #2: You can also use the readtable() function to read the data into...
% a variable, e.g. T. You can then access the variables using T.Subject, T.Factor, etc.
% 
%%
% Provide descriptive statistics
% 1.	Determine how many subjects there are in the dataset. Do this by ...
% creating a vector that contains only one instance of each subject ID. ...
% Hint: unique().  Unique is very handy function that you will use often.

n_subjects = unique(Subject);

% 2.	Using fprintf(), print the number of subjects for whom we have ... 
% data, so that the output looks something like: #subjects: XX, where XX...
% would be the number of subjects.

fprintf('#subjects: %d \n\n', size(n_subjects,1))

% 3.	Similarly, determine and print how many factors there are in ...
% the dataset.

n_factors = unique(Factor);

% 4.	Similarly, determine and print how many conditions there are in ...
% the dataset.

fprintf('#factors: %d \n\n', size(n_factors,1))

%%
% Looping (Part 2)
% 1.	Using a for-loop, print out the ID of each subject in the list ... 
% of unique subjects that you created above. Use the function fprintf() to
% do this.

for i = 1:size(n_subjects,1)
    fprintf('Subject ID: %d \n', n_subjects(i,1))
end

% Generalizability criteria
% Generalizability refers to the ability of a piece of code to handle ...
% changes in properties of the input data dynamically, i.e. without ...
% intervention on your part.  In this assignment, the generalizability of...
% your code will be tested by running it on a dataset containing:
% 1.	Different number of subjects.
































